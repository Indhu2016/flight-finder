# ============================================================================
# Smart Travel Optimizer - Python Project Configuration
# ============================================================================

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "smart-travel-optimizer"
version = "1.0.0"
description = "Agentic AI Travel Route Optimizer - Autonomous AI agents for travel planning"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = ["agentic-ai", "autonomous-agent", "travel-optimization", "ai-agent"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = [
    "python-dotenv>=1.0.1",
    "requests>=2.32.3",
    "pydantic>=2.9.2",
    "rich>=13.9.2",
    "streamlit>=1.38.0",
    "httpx>=0.27.0",
    "aiohttp>=3.9.5",
    "jsonschema>=4.23.0",
    "marshmallow>=3.21.3",
    "asyncio-throttle>=1.0.2",
    "cachetools>=5.3.3",
    "structlog>=23.2.0",
    "click>=8.1.7",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.1",
    "pytest-xdist>=3.6.0",
    "ruff>=0.1.15",
    "black>=23.12.1",
    "isort>=5.13.2",
    "mypy>=1.8.0",
    "bandit>=1.7.5",
    "safety>=3.0.1",
    "pip-audit>=2.6.1",
    "pre-commit>=3.6.0",
    "types-requests>=2.31.0.20",
]

[project.scripts]
smart-travel = "main:main"

[project.urls]
Homepage = "https://github.com/Indhu2016/flight-finder"
Repository = "https://github.com/Indhu2016/flight-finder.git"
Issues = "https://github.com/Indhu2016/flight-finder/issues"

# Testing Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=xml:reports/coverage.xml",
    "--cov-report=html:reports/htmlcov",
    "--junitxml=reports/pytest-report.xml",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for system components",
    "security: Security-focused tests",
    "slow: Tests that take longer to run",
    "agent: Tests for agentic behavior",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage Configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/__pycache__/*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
show_missing = true
precision = 2

# Code Formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | build
    | dist
    | node_modules
    | reports
)/
'''

# Import Sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = ["streamlit", "pydantic", "rich", "click"]

# Linting and Formatting with Ruff
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S104",  # hardcoded bind all interfaces
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "reports",
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["S101", "S106"]  # Allow asserts and hardcoded passwords in tests

# Type Checking
[tool.mypy]
python_version = "3.8"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "rich.*",
    "aiohttp.*",
    "asyncio_throttle.*",
]
ignore_missing_imports = true

# Security Scanning
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "node_modules"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection (for subprocess)

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/tests/*.py"]
